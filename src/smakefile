######################################################################
# Makefile to build Shell 6.00M under SAS/C 6.58
#ï¿½NOTE: char's are UNSIGNED by default, and the executable's called 'csh'

#CFLAGS	= OPTTIME NOSTKCHK NODEBUG    STRMERGE PARMS=REG UNSCHAR MCCONS
CFLAGS	= INCDIR=include: STKCHK STKEXT STRICT STRCONS NODEBUG STRMERGE PARMS=REG UNSCHAR MCCONS UTILLIB
LFLAGS	= NOICONS STRIPDBG
OPTIM	= OPTIMIZE OPTTIME
GSTFILE	= cshell.gst
DEST	= csh
SRCS	= run.c main.c comm1.c comm2.c comm3.c execom.c set.c sub.c globals.c rawcon.c syms.c hypdoc.c WindowBounds.c
HDRS	= proto.h shell.h WindowBounds.h
OBJS	= run.o main.o comm1.o comm2.o comm3.o execom.o set.o sub.o globals.o rawcon.o WindowBounds.o
CC	= sc

# OPTSIZE   = short code optimize      NOSTKCHK  = no stack overflow check
# NODEBUG   = no debug info            UNSCHAR   = unsigned chars by default
# STRMERGE  = one copy per string      CPU=68000 = code for 68000
# GST=...   = read precompiled header  NOOBJNAME MAKEGST=... = write precompiled header
# PARMS=REG = register arguments       ND        = strip debug information

# added [AMK]:
# MCCONS    = allow multi-char const   OPTTIME   = optimize time

csh: $(OBJS)
	slink FROM lib:cres.o $(OBJS) LIB LIB:scm.lib LIB:sc.lib LIB:debug.lib\
		LIB:small.lib WITH LIB:utillib.with TO $(DEST).ld $(LFLAGS)
	slink FROM $(DEST).ld TO $(DEST) $(LFLAGS) NODEBUG
	@protect $(DEST)    add p quiet
	@protect $(DEST).ld add p quiet

$(GSTFILE): shell.h proto.h
	@-avail flush
	$(CC) UNSCHAR NOOBJNAME MAKEGST=$(GSTFILE) syms.c

comm1.o: comm1.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) comm1.c
comm2.o: comm2.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) comm2.c
comm3.o: comm3.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) comm3.c
execom.o: execom.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) execom.c
globals.o: globals.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) globals.c
main.o: main.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) main.c
rawcon.o: rawcon.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) rawcon.c
run.o: run.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) run.c
set.o: set.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) set.c
sub.o: sub.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) sub.c
WindowBounds.o: WindowBounds.c $(GSTFILE)
	$(CC) $(CFLAGS) $(OPTIM) GST=$(GSTFILE) WindowBounds.c

install:
	@echo "Installing CShell ..."
	@copy $(DEST)    /SDK/C/csh    clone

clean:
	@echo "Cleaning up working directory ..."
	@-delete $(GSTFILE) $(GSTFILE).info $(OBJS) $(DEST) $(DEST).ld quiet >nil:
	@-avail flush >nil:

rel:
	@echo "Making release version ..."
	@-delete csh.lha cshsrc.lha quiet >nil:
	@csh -c touch sernum
	@eval `type sernum` + 1 >sernumtmp
	@delete sernum quiet
	@rename sernumtmp sernum
	@copy csh:csh.ld csh:csh csh:release`type sernum` clone quiet
	lha -a a csh.lha csh:csh csh:csh.doc History_OLD.Txt\
		csh:csh-reference.guide csh:README csh:HISTORY\
		csh:class.sh .DisplayMe csh:demo.sh csh:menu.sh\
		csh:overview.doc csh:feedback.doc csh:tips.doc\
#		"amigaguide/*"
	lha -a a cshsrc.lha $(SRCS) $(HDRS) smakefile technotes.doc
	@makedir RAM:contrib
	@copy HD:OS13/c/du HD:OS13/c/cmp HD:OS13/c/xdel RAM:contrib CLONE QUIET
	lha -a a csh.lha "RAM:contrib/*"
	@delete RAM:contrib ALL QUIET
	@assign AMK: APP:SAS-C
	lha -a -r -x a cshsrc.lha AMK:Custom_Headers/mindebug.h
	lha -a -r -x a cshsrc.lha "AMK:Custom_*/OwnDevUnit*"
	lha -a -r -x a cshsrc.lha "AMK:Custom_*/ODU*"
	lha -a -r -x a cshsrc.lha "AMK:Custom_*/*/reqtools*"
	lha -a -r -x a cshsrc.lha "AMK:Custom_*/reqtools*"
	lha -a -r -x a cshsrc.lha "AMK:Custom_*/*/multiuser*"
	lha -a -r -x a cshsrc.lha "AMK:Custom_*/multiuser*"
	@assign AMK: remove

